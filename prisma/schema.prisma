generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl         = env("POSTGRES_URL_NON_POOLING")
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

// TWEETS

model Tweet {
  id String @id @default(cuid())

  userId String
  user   User   @relation("Author", fields: [userId], references: [id], onDelete: Cascade)

  text   String   @db.VarChar(280)
  images String[] @db.Text
  links  String[] @db.Text

  likedBy User[]

  parentTweetId String?
  parentTweet   Tweet?  @relation("TweetToTweet", fields: [parentTweetId], references: [id], onDelete: Cascade)

  replies Tweet[] @relation("TweetToTweet")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// AUTH

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Tweets        Tweet[]   @relation("Author")
  followers     User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")

  bio String?

  createdAt DateTime @default(now())

  likedTweets Tweet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
